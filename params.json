{"name":"dyson","tagline":"Node server for dynamic, fake JSON.","body":"# dyson\r\n\r\nNode server for dynamic, fake JSON.\r\n\r\n## Give it to me, now\r\n\r\n    npm install -g dyson\r\n    dyson demo\r\n    # Check http://localhost:3000/features\r\n\r\n## Introduction\r\n\r\nDyson allows you to define endpoints at a `path` and return JSON based on a `template` object.\r\n\r\nWhen developing client-side applications, for data usually either static JSON files are used, or an actual server, backend, datastore, API, you name it. Sometimes static files are too static, and sometimes an actual server is not available, not accessible, or too tedious to setup.\r\n\r\nThis is where dyson comes in. Get a full fake server for your application up and running in minutes.\r\n\r\nHere's a complete service endpoint configuration file:\r\n\r\n    var g = require('dyson-generators');\r\n\r\n    module.exports = {\r\n        path: '/user/:id',\r\n        template: {\r\n            id: function(params) {\r\n                return params.id;\r\n            },\r\n            name: g.name\r\n        }\r\n    }\r\n\r\nThat's all. A request to `/user/412` would return:\r\n\r\n    {\r\n        \"id\": 412,\r\n        \"name\": \"John\"\r\n    }\r\n\r\n## Overview\r\n\r\n* Easy configuration, extensive options\r\n* Dynamic responses\r\n    * Responses may depend on request path or parameters (e.g. simulate different login scenarios based on username)\r\n    * Respond with different status code for specific requests (e.g. 404 for `?id=999`)\r\n    * Includes random data generators\r\n* Supports GET, POST, PUT, DELETE (and OPTIONS)\r\n* Supports CORS\r\n* Includes dummy image generator (from any image service)\r\n\r\n[![Build Status](https://travis-ci.org/webpro/dyson.png)](https://travis-ci.org/webpro/dyson)\r\n\r\n## Configuration\r\n\r\nConfigure endpoints using simple objects:\r\n\r\n    {\r\n        path: '/user/:id',\r\n        template: {\r\n            id: function(params, query, body) {\r\n                return params.id;\r\n            },\r\n            name: g.name,\r\n            address: {\r\n            \tzip: g.zipUS,\r\n            \tcity: g.city\r\n            }\r\n        }\r\n    }\r\n\r\nThe `path` string is the usual argument provided to [Express](http://expressjs.com/api.html#app.VERB), as in `app.get(path, callback);`.\r\n\r\nThe `template` object may contain properties of the following types:\r\n\r\n* function: the function will be invoked with arguments _(params, query, body)_\r\n* string, boolean, number, array: returned as-is\r\n* object: will be recursively iterated\r\n* promise: if the function is a promise, it will be replaced with the resolving value\r\n\r\n## Fake data generators\r\n\r\nTo use the data generators (e.g. `g.name`), run:\r\n\r\n    npm install dyson-generators --save-dev\r\n\r\nOr manually include [dyson-generators](http://github.com/webpro/dyson-generators) in package.json:\r\n\r\n    \"devDependencies\": {\r\n        \"dyson-generators\": \"~0.1\"\r\n    }\r\n\r\nand `npm install` to add it. Please refer to [dyson-generators](http://github.com/webpro/dyson-generators) for usage and examples.\r\n\r\n## Collections\r\n\r\nSame as examples above, but override the `collection` property:\r\n\r\n    {\r\n        path: '/users',\r\n        collection: true,\r\n        template: user.template\r\n    }\r\n\r\nThis will give a response with an array of users (default array length is random between 2 and 10):\r\n\r\n    [\r\n        {\r\n            \"id\": 412,\r\n            \"name\": \"John\"\r\n        },\r\n        {\r\n            \"id\": 218,\r\n            \"name\": \"Olivia\"\r\n        }\r\n    ]\r\n\r\n## Images\r\n\r\nIn addition to configured endpoints, dyson registers a [dummy image service](http://github.com/webpro/dyson-image) at `/image`. E.g. requesting `/image/300x200` serves an image with given dimensions.\r\n\r\nThis service is a proxy to [Dynamic Dummy Image Generator](http://dummyimage.com/) by [Russell Heimlich](http://twitter.com/kingkool68).\r\n\r\n## Defaults\r\n\r\nThe default values for the configuration objects:\r\n\r\n    {\r\n        cache: true,\r\n        size: function() {\r\n            return _.random(2,10);\r\n        },\r\n        collection: false,\r\n        callback: response.generate,\r\n        render: response.render\r\n    };\r\n\r\n\r\n* `cache:true` means that multiple requests to the same path will result in the same response\r\n* `size:function` is the number of objects in the collection\r\n* `callback:function`\r\n    * the provided default function is doing the hard work (but can be overridden)\r\n    * used as middleware in Express\r\n    * must set `res.body` and call `next()` to render response\r\n* `render:function`\r\n    * the default function to render the response (basically `res.send(200, res.body);`)\r\n    * used as middleware in Express\r\n\r\n## Containers\r\n\r\nThe response data can be stored anywhere in the response in a `container` object. Functions in the `container` object are invoked with arguments _(params, query, data)_:\r\n\r\n    {\r\n        path: '/users',\r\n        template: user.template,\r\n        container: {\r\n            meta: function(params, query, data) {\r\n                userCount: data.length\r\n            },\r\n            data: {\r\n                all: [],\r\n                the: {\r\n                    way: {\r\n                        here: function(params, query, data) {\r\n                            return data;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\nAnd an example response:\r\n\r\n    {\r\n        \"meta\": {\r\n            \"userCount\": 2\r\n        },\r\n            data: {\r\n                all: [],\r\n                the: {\r\n                    way: {\r\n                        here: [\r\n                            {\r\n                                \"id\": 412,\r\n                                \"name\": \"John\"\r\n                            },\r\n                            {\r\n                                \"id\": 218,\r\n                                \"name\": \"Olivia\"\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n## Combined requests\r\n\r\nBasic support for \"combined\" requests is available, by means of a comma separated path fragment.\r\n\r\nFor example, a request to `/user/5,13` will result in an array of the responses from `/user/5` and `/user/13`.\r\n\r\n## Status codes\r\n\r\nBy default, all responses are sent with a status code `200` (and the `Content-Type: application/json` header).\r\n\r\nThis can be completely overridden with the `status` property, e.g.:\r\n\r\n    path: '/feature/:foo?',\r\n    status: function(req, res) {\r\n        if(req.params.foo === '999') {\r\n            res.send(404, 'Feature not found');\r\n        }\r\n    }\r\n\r\nWould result in a `404` when requesting `/feature/999`.\r\n\r\n## Get started\r\n\r\n### Installation\r\n\r\n    npm install -g dyson\r\n\r\nLocal installation is unsupported.\r\n\r\n### Quick demo\r\n\r\nRun `dyson demo` to play around and serve some demo JSON responses at these endpoints:\r\n\r\n    http://localhost:3000/employee/1\r\n    http://localhost:3000/users\r\n    http://localhost:3000/features\r\n\r\n### Project\r\n\r\nIn any project you can generate some dummy templates to get started:\r\n\r\n    dyson init [dir]\r\n\r\nThis script copies dummy config objects in the `[dir]/get`, `[dir]/post`, `[dir]/put`, `[dir]/delete` subdirs. These folders are scanned for configuration files when dyson is started:\r\n\r\n    dyson [dir]\r\n\r\nThis starts the services configured in `[dir]` at `http://localhost:3000`.\r\n\r\n### Note\r\n\r\nYour configuration files are just regular Node modules. Dyson is installed globally as a server; when started it reads those configuration modules local to your project.\r\nSo if you need any module in your configuration, then you should add them to your project (`package.json`), and `require()` them in configuration files (e.g. [dyson-generators](#fake-data-generators)).\r\n\r\n## Development & run tests\r\n\r\n    git clone git@github.com:webpro/dyson.git\r\n    cd dyson\r\n    npm install\r\n    npm test\r\n","google":"UA-42001005-1","note":"Don't delete this file! It's used internally to help with page regeneration."}